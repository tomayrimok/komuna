// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-axios';
import type {
  AppControllerGetDataData,
  DebtEdgeControllerGetUserBalanceDetailsData,
  DebtEdgeControllerGetUserBalanceData,
  DebtEdgeControllerGetDebtDetailsData,
  UserControllerLoginOrCreateData,
  UserControllerVerifyData,
  UserControllerVerifyResponse,
  UserControllerGetCurrentUserProfileData,
  UserControllerGetCurrentUserProfileResponse,
  UserControllerCreateUserData,
  UserControllerCreateUserResponse,
  UserControllerLogoutData,
  ExpenseControllerGetApartmentExpensesData,
  ExpenseControllerAddEditExpenseData,
  ExpenseControllerGetExpenseDetailsData,
  PaymentControllerCreatePaymentData,
  ApartmentControllerGetApartmentWithResidentsData,
} from './types.gen';
import { client as _heyApiClient } from './client.gen';
import { ApartmentExpenseResponse, ApartmentResponse, BalanceDetailsResponse, DebtDetailsResponse, ExpenseDetailsResponse } from '../types';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<
  TData,
  ThrowOnError
> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

export const appControllerGetData = <ThrowOnError extends boolean = false>(
  options?: Options<AppControllerGetDataData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
    url: '/api',
    ...options,
  });
};

export const debtEdgeControllerGetUserBalanceDetails = <ThrowOnError extends boolean = false>(
  options: Options<DebtEdgeControllerGetUserBalanceDetailsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<BalanceDetailsResponse[], unknown, ThrowOnError>({
    url: '/api/debt-edge/user-balance-details',
    ...options,
  });
};

export const debtEdgeControllerGetUserBalance = <ThrowOnError extends boolean = false>(
  options: Options<DebtEdgeControllerGetUserBalanceData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<number, unknown, ThrowOnError>({
    url: '/api/debt-edge/user-balance',
    ...options,
  });
};

export const debtEdgeControllerGetDebtDetails = <ThrowOnError extends boolean = false>(
  options: Options<DebtEdgeControllerGetDebtDetailsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<DebtDetailsResponse, unknown, ThrowOnError>({
    url: '/api/debt-edge/debt-details',
    ...options,
  });
};

export const userControllerLoginOrCreate = <ThrowOnError extends boolean = false>(
  options: Options<UserControllerLoginOrCreateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
    url: '/api/user/login',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

export const userControllerVerify = <ThrowOnError extends boolean = false>(
  options: Options<UserControllerVerifyData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<UserControllerVerifyResponse, unknown, ThrowOnError>({
    url: '/api/user/verify',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

export const userControllerGetCurrentUserProfile = <ThrowOnError extends boolean = false>(
  options?: Options<UserControllerGetCurrentUserProfileData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<UserControllerGetCurrentUserProfileResponse, unknown, ThrowOnError>({
    url: '/api/user',
    ...options,
  });
};

export const userControllerCreateUser = <ThrowOnError extends boolean = false>(
  options: Options<UserControllerCreateUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<UserControllerCreateUserResponse, unknown, ThrowOnError>({
    url: '/api/user',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

export const userControllerLogout = <ThrowOnError extends boolean = false>(
  options?: Options<UserControllerLogoutData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
    url: '/api/user/logout',
    ...options,
  });
};

export const expenseControllerGetApartmentExpenses = <ThrowOnError extends boolean = false>(
  options: Options<ExpenseControllerGetApartmentExpensesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<ApartmentExpenseResponse[], unknown, ThrowOnError>({
    url: '/api/expense/apartment-expenses',
    ...options,
  });
};

export const expenseControllerAddEditExpense = <ThrowOnError extends boolean = false>(
  options: Options<ExpenseControllerAddEditExpenseData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
    url: '/api/expense/add-edit-expense',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

export const expenseControllerGetExpenseDetails = <ThrowOnError extends boolean = false>(
  options: Options<ExpenseControllerGetExpenseDetailsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<ExpenseDetailsResponse, unknown, ThrowOnError>({
    url: '/api/expense/expense-details',
    ...options,
  });
};

export const paymentControllerCreatePayment = <ThrowOnError extends boolean = false>(
  options?: Options<PaymentControllerCreatePaymentData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
    url: '/api/payment/create-payment',
    ...options,
  });
};

export const apartmentControllerGetApartmentWithResidents = <ThrowOnError extends boolean = false>(
  options: Options<ApartmentControllerGetApartmentWithResidentsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<ApartmentResponse, unknown, ThrowOnError>({
    url: '/api/apartment',
    ...options,
  });
};
