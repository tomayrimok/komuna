// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options,
  appControllerGetData,
  debtEdgeControllerGetUserBalanceDetails,
  debtEdgeControllerGetUserBalance,
  debtEdgeControllerGetDebtDetails,
  userControllerLoginOrCreate,
  userControllerVerify,
  userControllerGetCurrentUserProfile,
  userControllerCreateUser,
  userControllerLogout,
  expenseControllerGetApartmentExpenses,
  expenseControllerAddEditExpense,
  expenseControllerGetExpenseDetails,
  paymentControllerCreatePayment,
  apartmentControllerGetApartmentWithResidents,
  apartmentControllerCreateApartment,
  apartmentControllerJoinApartment,
  shoppingListControllerGetShoppingList,
  shoppingListControllerSyncItems,
  notificationControllerRegisterToken,
} from '../sdk.gen';
import { queryOptions, type UseMutationOptions, type DefaultError } from '@tanstack/react-query';
import type {
  AppControllerGetDataData,
  DebtEdgeControllerGetUserBalanceDetailsData,
  DebtEdgeControllerGetUserBalanceData,
  DebtEdgeControllerGetDebtDetailsData,
  UserControllerLoginOrCreateData,
  UserControllerVerifyData,
  UserControllerVerifyResponse,
  UserControllerGetCurrentUserProfileData,
  UserControllerCreateUserData,
  UserControllerCreateUserResponse,
  UserControllerLogoutData,
  ExpenseControllerGetApartmentExpensesData,
  ExpenseControllerAddEditExpenseData,
  ExpenseControllerGetExpenseDetailsData,
  PaymentControllerCreatePaymentData,
  PaymentControllerCreatePaymentResponse,
  ApartmentControllerGetApartmentWithResidentsData,
  ApartmentControllerCreateApartmentData,
  ApartmentControllerJoinApartmentData,
  ApartmentControllerJoinApartmentResponse,
  ShoppingListControllerGetShoppingListData,
  ShoppingListControllerSyncItemsData,
  ShoppingListControllerSyncItemsResponse,
  NotificationControllerRegisterTokenData,
} from '../types.gen';
import type { AxiosError } from 'axios';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
    _id: string;
    _infinite?: boolean;
  }
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseURL: (options?.client ?? _heyApiClient).getConfig().baseURL,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return [params];
};

export const appControllerGetDataQueryKey = (options?: Options<AppControllerGetDataData>) =>
  createQueryKey('appControllerGetData', options);

export const appControllerGetDataOptions = (options?: Options<AppControllerGetDataData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await appControllerGetData({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: appControllerGetDataQueryKey(options),
  });
};

export const debtEdgeControllerGetUserBalanceDetailsQueryKey = (
  options: Options<DebtEdgeControllerGetUserBalanceDetailsData>
) => createQueryKey('debtEdgeControllerGetUserBalanceDetails', options);

export const debtEdgeControllerGetUserBalanceDetailsOptions = (
  options: Options<DebtEdgeControllerGetUserBalanceDetailsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await debtEdgeControllerGetUserBalanceDetails({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: debtEdgeControllerGetUserBalanceDetailsQueryKey(options),
  });
};

export const debtEdgeControllerGetUserBalanceQueryKey = (options: Options<DebtEdgeControllerGetUserBalanceData>) =>
  createQueryKey('debtEdgeControllerGetUserBalance', options);

export const debtEdgeControllerGetUserBalanceOptions = (options: Options<DebtEdgeControllerGetUserBalanceData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await debtEdgeControllerGetUserBalance({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: debtEdgeControllerGetUserBalanceQueryKey(options),
  });
};

export const debtEdgeControllerGetDebtDetailsQueryKey = (options: Options<DebtEdgeControllerGetDebtDetailsData>) =>
  createQueryKey('debtEdgeControllerGetDebtDetails', options);

export const debtEdgeControllerGetDebtDetailsOptions = (options: Options<DebtEdgeControllerGetDebtDetailsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await debtEdgeControllerGetDebtDetails({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: debtEdgeControllerGetDebtDetailsQueryKey(options),
  });
};

export const userControllerLoginOrCreateQueryKey = (options: Options<UserControllerLoginOrCreateData>) =>
  createQueryKey('userControllerLoginOrCreate', options);

export const userControllerLoginOrCreateOptions = (options: Options<UserControllerLoginOrCreateData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await userControllerLoginOrCreate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: userControllerLoginOrCreateQueryKey(options),
  });
};

export const userControllerLoginOrCreateMutation = (
  options?: Partial<Options<UserControllerLoginOrCreateData>>
): UseMutationOptions<unknown, AxiosError<DefaultError>, Options<UserControllerLoginOrCreateData>> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    AxiosError<DefaultError>,
    Options<UserControllerLoginOrCreateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await userControllerLoginOrCreate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const userControllerVerifyQueryKey = (options: Options<UserControllerVerifyData>) =>
  createQueryKey('userControllerVerify', options);

export const userControllerVerifyOptions = (options: Options<UserControllerVerifyData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await userControllerVerify({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: userControllerVerifyQueryKey(options),
  });
};

export const userControllerVerifyMutation = (
  options?: Partial<Options<UserControllerVerifyData>>
): UseMutationOptions<UserControllerVerifyResponse, AxiosError<DefaultError>, Options<UserControllerVerifyData>> => {
  const mutationOptions: UseMutationOptions<
    UserControllerVerifyResponse,
    AxiosError<DefaultError>,
    Options<UserControllerVerifyData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await userControllerVerify({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const userControllerGetCurrentUserProfileQueryKey = (
  options?: Options<UserControllerGetCurrentUserProfileData>
) => createQueryKey('userControllerGetCurrentUserProfile', options);

export const userControllerGetCurrentUserProfileOptions = (
  options?: Options<UserControllerGetCurrentUserProfileData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await userControllerGetCurrentUserProfile({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: userControllerGetCurrentUserProfileQueryKey(options),
  });
};

export const userControllerCreateUserQueryKey = (options: Options<UserControllerCreateUserData>) =>
  createQueryKey('userControllerCreateUser', options);

export const userControllerCreateUserOptions = (options: Options<UserControllerCreateUserData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await userControllerCreateUser({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: userControllerCreateUserQueryKey(options),
  });
};

export const userControllerCreateUserMutation = (
  options?: Partial<Options<UserControllerCreateUserData>>
): UseMutationOptions<
  UserControllerCreateUserResponse,
  AxiosError<DefaultError>,
  Options<UserControllerCreateUserData>
> => {
  const mutationOptions: UseMutationOptions<
    UserControllerCreateUserResponse,
    AxiosError<DefaultError>,
    Options<UserControllerCreateUserData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await userControllerCreateUser({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const userControllerLogoutQueryKey = (options?: Options<UserControllerLogoutData>) =>
  createQueryKey('userControllerLogout', options);

export const userControllerLogoutOptions = (options?: Options<UserControllerLogoutData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await userControllerLogout({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: userControllerLogoutQueryKey(options),
  });
};

export const userControllerLogoutMutation = (
  options?: Partial<Options<UserControllerLogoutData>>
): UseMutationOptions<unknown, AxiosError<DefaultError>, Options<UserControllerLogoutData>> => {
  const mutationOptions: UseMutationOptions<unknown, AxiosError<DefaultError>, Options<UserControllerLogoutData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await userControllerLogout({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const expenseControllerGetApartmentExpensesQueryKey = (
  options: Options<ExpenseControllerGetApartmentExpensesData>
) => createQueryKey('expenseControllerGetApartmentExpenses', options);

export const expenseControllerGetApartmentExpensesOptions = (
  options: Options<ExpenseControllerGetApartmentExpensesData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await expenseControllerGetApartmentExpenses({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: expenseControllerGetApartmentExpensesQueryKey(options),
  });
};

export const expenseControllerAddEditExpenseQueryKey = (options: Options<ExpenseControllerAddEditExpenseData>) =>
  createQueryKey('expenseControllerAddEditExpense', options);

export const expenseControllerAddEditExpenseOptions = (options: Options<ExpenseControllerAddEditExpenseData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await expenseControllerAddEditExpense({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: expenseControllerAddEditExpenseQueryKey(options),
  });
};

export const expenseControllerAddEditExpenseMutation = (
  options?: Partial<Options<ExpenseControllerAddEditExpenseData>>
): UseMutationOptions<unknown, AxiosError<DefaultError>, Options<ExpenseControllerAddEditExpenseData>> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    AxiosError<DefaultError>,
    Options<ExpenseControllerAddEditExpenseData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await expenseControllerAddEditExpense({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const expenseControllerGetExpenseDetailsQueryKey = (options: Options<ExpenseControllerGetExpenseDetailsData>) =>
  createQueryKey('expenseControllerGetExpenseDetails', options);

export const expenseControllerGetExpenseDetailsOptions = (options: Options<ExpenseControllerGetExpenseDetailsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await expenseControllerGetExpenseDetails({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: expenseControllerGetExpenseDetailsQueryKey(options),
  });
};

export const paymentControllerCreatePaymentQueryKey = (options: Options<PaymentControllerCreatePaymentData>) =>
  createQueryKey('paymentControllerCreatePayment', options);

export const paymentControllerCreatePaymentOptions = (options: Options<PaymentControllerCreatePaymentData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await paymentControllerCreatePayment({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: paymentControllerCreatePaymentQueryKey(options),
  });
};

export const paymentControllerCreatePaymentMutation = (
  options?: Partial<Options<PaymentControllerCreatePaymentData>>
): UseMutationOptions<
  PaymentControllerCreatePaymentResponse,
  AxiosError<DefaultError>,
  Options<PaymentControllerCreatePaymentData>
> => {
  const mutationOptions: UseMutationOptions<
    PaymentControllerCreatePaymentResponse,
    AxiosError<DefaultError>,
    Options<PaymentControllerCreatePaymentData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await paymentControllerCreatePayment({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const apartmentControllerGetApartmentWithResidentsQueryKey = (
  options: Options<ApartmentControllerGetApartmentWithResidentsData>
) => createQueryKey('apartmentControllerGetApartmentWithResidents', options);

export const apartmentControllerGetApartmentWithResidentsOptions = (
  options: Options<ApartmentControllerGetApartmentWithResidentsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await apartmentControllerGetApartmentWithResidents({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: apartmentControllerGetApartmentWithResidentsQueryKey(options),
  });
};

export const apartmentControllerCreateApartmentQueryKey = (options: Options<ApartmentControllerCreateApartmentData>) =>
  createQueryKey('apartmentControllerCreateApartment', options);

export const apartmentControllerCreateApartmentOptions = (options: Options<ApartmentControllerCreateApartmentData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await apartmentControllerCreateApartment({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: apartmentControllerCreateApartmentQueryKey(options),
  });
};

export const apartmentControllerCreateApartmentMutation = (
  options?: Partial<Options<ApartmentControllerCreateApartmentData>>
): UseMutationOptions<unknown, AxiosError<DefaultError>, Options<ApartmentControllerCreateApartmentData>> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    AxiosError<DefaultError>,
    Options<ApartmentControllerCreateApartmentData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await apartmentControllerCreateApartment({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const apartmentControllerJoinApartmentQueryKey = (options?: Options<ApartmentControllerJoinApartmentData>) =>
  createQueryKey('apartmentControllerJoinApartment', options);

export const apartmentControllerJoinApartmentOptions = (options?: Options<ApartmentControllerJoinApartmentData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await apartmentControllerJoinApartment({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: apartmentControllerJoinApartmentQueryKey(options),
  });
};

export const apartmentControllerJoinApartmentMutation = (
  options?: Partial<Options<ApartmentControllerJoinApartmentData>>
): UseMutationOptions<
  ApartmentControllerJoinApartmentResponse,
  AxiosError<DefaultError>,
  Options<ApartmentControllerJoinApartmentData>
> => {
  const mutationOptions: UseMutationOptions<
    ApartmentControllerJoinApartmentResponse,
    AxiosError<DefaultError>,
    Options<ApartmentControllerJoinApartmentData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await apartmentControllerJoinApartment({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const shoppingListControllerGetShoppingListQueryKey = (
  options: Options<ShoppingListControllerGetShoppingListData>
) => createQueryKey('shoppingListControllerGetShoppingList', options);

export const shoppingListControllerGetShoppingListOptions = (
  options: Options<ShoppingListControllerGetShoppingListData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await shoppingListControllerGetShoppingList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: shoppingListControllerGetShoppingListQueryKey(options),
  });
};

export const shoppingListControllerSyncItemsQueryKey = (options: Options<ShoppingListControllerSyncItemsData>) =>
  createQueryKey('shoppingListControllerSyncItems', options);

export const shoppingListControllerSyncItemsOptions = (options: Options<ShoppingListControllerSyncItemsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await shoppingListControllerSyncItems({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: shoppingListControllerSyncItemsQueryKey(options),
  });
};

export const shoppingListControllerSyncItemsMutation = (
  options?: Partial<Options<ShoppingListControllerSyncItemsData>>
): UseMutationOptions<
  ShoppingListControllerSyncItemsResponse,
  AxiosError<DefaultError>,
  Options<ShoppingListControllerSyncItemsData>
> => {
  const mutationOptions: UseMutationOptions<
    ShoppingListControllerSyncItemsResponse,
    AxiosError<DefaultError>,
    Options<ShoppingListControllerSyncItemsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await shoppingListControllerSyncItems({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const notificationControllerRegisterTokenQueryKey = (
  options?: Options<NotificationControllerRegisterTokenData>
) => createQueryKey('notificationControllerRegisterToken', options);

export const notificationControllerRegisterTokenOptions = (
  options?: Options<NotificationControllerRegisterTokenData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await notificationControllerRegisterToken({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: notificationControllerRegisterTokenQueryKey(options),
  });
};

export const notificationControllerRegisterTokenMutation = (
  options?: Partial<Options<NotificationControllerRegisterTokenData>>
): UseMutationOptions<unknown, AxiosError<DefaultError>, Options<NotificationControllerRegisterTokenData>> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    AxiosError<DefaultError>,
    Options<NotificationControllerRegisterTokenData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await notificationControllerRegisterToken({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};
