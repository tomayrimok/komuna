// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options,
  appControllerGetData,
  debtEdgeControllerGetUserBalanceDetails,
  debtEdgeControllerGetUserBalance,
  debtEdgeControllerGetDebtDetails,
  userControllerLoginOrCreate,
  userControllerVerify,
  userControllerGetCurrentUserProfile,
  userControllerCreateUser,
  userControllerLogout,
  expenseControllerGetApartmentExpenses,
  expenseControllerAddEditExpense,
  expenseControllerGetExpenseDetails,
  paymentControllerCreatePayment,
  apartmentControllerGetApartmentWithResidents,
  apartmentControllerCreateApartment,
  apartmentControllerJoinApartment,
  taskControllerCreateTask,
  taskControllerUpdateTaskStatus,
  taskControllerEditTask,
  taskControllerGetAllTasks,
  taskControllerGetCompletedTasks,
  incidentControllerGetAllIncidents,
  incidentControllerGetIncidentDetails,
  incidentControllerAddEditIncident,
  incidentControllerUpdateIncident,
  incidentControllerNewComment,
  incidentControllerSetOwnerSeen,
} from '../sdk.gen';
import { queryOptions, type UseMutationOptions, type DefaultError } from '@tanstack/react-query';
import type {
  AppControllerGetDataData,
  DebtEdgeControllerGetUserBalanceDetailsData,
  DebtEdgeControllerGetUserBalanceData,
  DebtEdgeControllerGetDebtDetailsData,
  UserControllerLoginOrCreateData,
  UserControllerVerifyData,
  UserControllerVerifyResponse,
  UserControllerGetCurrentUserProfileData,
  UserControllerCreateUserData,
  UserControllerCreateUserResponse,
  UserControllerLogoutData,
  ExpenseControllerGetApartmentExpensesData,
  ExpenseControllerAddEditExpenseData,
  ExpenseControllerGetExpenseDetailsData,
  PaymentControllerCreatePaymentData,
  PaymentControllerCreatePaymentResponse,
  ApartmentControllerGetApartmentWithResidentsData,
  ApartmentControllerCreateApartmentData,
  ApartmentControllerJoinApartmentData,
  TaskControllerCreateTaskData,
  TaskControllerUpdateTaskStatusData,
  TaskControllerEditTaskData,
  TaskControllerGetAllTasksData,
  TaskControllerGetCompletedTasksData,
  IncidentControllerGetAllIncidentsData,
  IncidentControllerGetIncidentDetailsData,
  IncidentControllerAddEditIncidentData,
  IncidentControllerAddEditIncidentResponse,
  IncidentControllerUpdateIncidentData,
  IncidentControllerUpdateIncidentResponse,
  IncidentControllerNewCommentData,
  IncidentControllerNewCommentResponse,
  IncidentControllerSetOwnerSeenData,
} from '../types.gen';
import type { AxiosError } from 'axios';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
    _id: string;
    _infinite?: boolean;
  }
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseURL: (options?.client ?? _heyApiClient).getConfig().baseURL,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return [params];
};

export const appControllerGetDataQueryKey = (options?: Options<AppControllerGetDataData>) =>
  createQueryKey('appControllerGetData', options);

export const appControllerGetDataOptions = (options?: Options<AppControllerGetDataData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await appControllerGetData({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: appControllerGetDataQueryKey(options),
  });
};

export const debtEdgeControllerGetUserBalanceDetailsQueryKey = (
  options: Options<DebtEdgeControllerGetUserBalanceDetailsData>
) => createQueryKey('debtEdgeControllerGetUserBalanceDetails', options);

export const debtEdgeControllerGetUserBalanceDetailsOptions = (
  options: Options<DebtEdgeControllerGetUserBalanceDetailsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await debtEdgeControllerGetUserBalanceDetails({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: debtEdgeControllerGetUserBalanceDetailsQueryKey(options),
  });
};

export const debtEdgeControllerGetUserBalanceQueryKey = (options: Options<DebtEdgeControllerGetUserBalanceData>) =>
  createQueryKey('debtEdgeControllerGetUserBalance', options);

export const debtEdgeControllerGetUserBalanceOptions = (options: Options<DebtEdgeControllerGetUserBalanceData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await debtEdgeControllerGetUserBalance({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: debtEdgeControllerGetUserBalanceQueryKey(options),
  });
};

export const debtEdgeControllerGetDebtDetailsQueryKey = (options: Options<DebtEdgeControllerGetDebtDetailsData>) =>
  createQueryKey('debtEdgeControllerGetDebtDetails', options);

export const debtEdgeControllerGetDebtDetailsOptions = (options: Options<DebtEdgeControllerGetDebtDetailsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await debtEdgeControllerGetDebtDetails({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: debtEdgeControllerGetDebtDetailsQueryKey(options),
  });
};

export const userControllerLoginOrCreateQueryKey = (options: Options<UserControllerLoginOrCreateData>) =>
  createQueryKey('userControllerLoginOrCreate', options);

export const userControllerLoginOrCreateOptions = (options: Options<UserControllerLoginOrCreateData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await userControllerLoginOrCreate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: userControllerLoginOrCreateQueryKey(options),
  });
};

export const userControllerLoginOrCreateMutation = (
  options?: Partial<Options<UserControllerLoginOrCreateData>>
): UseMutationOptions<unknown, AxiosError<DefaultError>, Options<UserControllerLoginOrCreateData>> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    AxiosError<DefaultError>,
    Options<UserControllerLoginOrCreateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await userControllerLoginOrCreate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const userControllerVerifyQueryKey = (options: Options<UserControllerVerifyData>) =>
  createQueryKey('userControllerVerify', options);

export const userControllerVerifyOptions = (options: Options<UserControllerVerifyData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await userControllerVerify({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: userControllerVerifyQueryKey(options),
  });
};

export const userControllerVerifyMutation = (
  options?: Partial<Options<UserControllerVerifyData>>
): UseMutationOptions<UserControllerVerifyResponse, AxiosError<DefaultError>, Options<UserControllerVerifyData>> => {
  const mutationOptions: UseMutationOptions<
    UserControllerVerifyResponse,
    AxiosError<DefaultError>,
    Options<UserControllerVerifyData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await userControllerVerify({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const userControllerGetCurrentUserProfileQueryKey = (
  options?: Options<UserControllerGetCurrentUserProfileData>
) => createQueryKey('userControllerGetCurrentUserProfile', options);

export const userControllerGetCurrentUserProfileOptions = (
  options?: Options<UserControllerGetCurrentUserProfileData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await userControllerGetCurrentUserProfile({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: userControllerGetCurrentUserProfileQueryKey(options),
  });
};

export const userControllerCreateUserQueryKey = (options: Options<UserControllerCreateUserData>) =>
  createQueryKey('userControllerCreateUser', options);

export const userControllerCreateUserOptions = (options: Options<UserControllerCreateUserData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await userControllerCreateUser({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: userControllerCreateUserQueryKey(options),
  });
};

export const userControllerCreateUserMutation = (
  options?: Partial<Options<UserControllerCreateUserData>>
): UseMutationOptions<
  UserControllerCreateUserResponse,
  AxiosError<DefaultError>,
  Options<UserControllerCreateUserData>
> => {
  const mutationOptions: UseMutationOptions<
    UserControllerCreateUserResponse,
    AxiosError<DefaultError>,
    Options<UserControllerCreateUserData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await userControllerCreateUser({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const userControllerLogoutQueryKey = (options?: Options<UserControllerLogoutData>) =>
  createQueryKey('userControllerLogout', options);

export const userControllerLogoutOptions = (options?: Options<UserControllerLogoutData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await userControllerLogout({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: userControllerLogoutQueryKey(options),
  });
};

export const userControllerLogoutMutation = (
  options?: Partial<Options<UserControllerLogoutData>>
): UseMutationOptions<unknown, AxiosError<DefaultError>, Options<UserControllerLogoutData>> => {
  const mutationOptions: UseMutationOptions<unknown, AxiosError<DefaultError>, Options<UserControllerLogoutData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await userControllerLogout({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const expenseControllerGetApartmentExpensesQueryKey = (
  options: Options<ExpenseControllerGetApartmentExpensesData>
) => createQueryKey('expenseControllerGetApartmentExpenses', options);

export const expenseControllerGetApartmentExpensesOptions = (
  options: Options<ExpenseControllerGetApartmentExpensesData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await expenseControllerGetApartmentExpenses({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: expenseControllerGetApartmentExpensesQueryKey(options),
  });
};

export const expenseControllerAddEditExpenseQueryKey = (options: Options<ExpenseControllerAddEditExpenseData>) =>
  createQueryKey('expenseControllerAddEditExpense', options);

export const expenseControllerAddEditExpenseOptions = (options: Options<ExpenseControllerAddEditExpenseData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await expenseControllerAddEditExpense({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: expenseControllerAddEditExpenseQueryKey(options),
  });
};

export const expenseControllerAddEditExpenseMutation = (
  options?: Partial<Options<ExpenseControllerAddEditExpenseData>>
): UseMutationOptions<unknown, AxiosError<DefaultError>, Options<ExpenseControllerAddEditExpenseData>> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    AxiosError<DefaultError>,
    Options<ExpenseControllerAddEditExpenseData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await expenseControllerAddEditExpense({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const expenseControllerGetExpenseDetailsQueryKey = (options: Options<ExpenseControllerGetExpenseDetailsData>) =>
  createQueryKey('expenseControllerGetExpenseDetails', options);

export const expenseControllerGetExpenseDetailsOptions = (options: Options<ExpenseControllerGetExpenseDetailsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await expenseControllerGetExpenseDetails({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: expenseControllerGetExpenseDetailsQueryKey(options),
  });
};

export const paymentControllerCreatePaymentQueryKey = (options: Options<PaymentControllerCreatePaymentData>) =>
  createQueryKey('paymentControllerCreatePayment', options);

export const paymentControllerCreatePaymentOptions = (options: Options<PaymentControllerCreatePaymentData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await paymentControllerCreatePayment({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: paymentControllerCreatePaymentQueryKey(options),
  });
};

export const paymentControllerCreatePaymentMutation = (
  options?: Partial<Options<PaymentControllerCreatePaymentData>>
): UseMutationOptions<
  PaymentControllerCreatePaymentResponse,
  AxiosError<DefaultError>,
  Options<PaymentControllerCreatePaymentData>
> => {
  const mutationOptions: UseMutationOptions<
    PaymentControllerCreatePaymentResponse,
    AxiosError<DefaultError>,
    Options<PaymentControllerCreatePaymentData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await paymentControllerCreatePayment({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const apartmentControllerGetApartmentWithResidentsQueryKey = (
  options: Options<ApartmentControllerGetApartmentWithResidentsData>
) => createQueryKey('apartmentControllerGetApartmentWithResidents', options);

export const apartmentControllerGetApartmentWithResidentsOptions = (
  options: Options<ApartmentControllerGetApartmentWithResidentsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await apartmentControllerGetApartmentWithResidents({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: apartmentControllerGetApartmentWithResidentsQueryKey(options),
  });
};

export const apartmentControllerCreateApartmentQueryKey = (options: Options<ApartmentControllerCreateApartmentData>) =>
  createQueryKey('apartmentControllerCreateApartment', options);

export const apartmentControllerCreateApartmentOptions = (options: Options<ApartmentControllerCreateApartmentData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await apartmentControllerCreateApartment({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: apartmentControllerCreateApartmentQueryKey(options),
  });
};

export const apartmentControllerCreateApartmentMutation = (
  options?: Partial<Options<ApartmentControllerCreateApartmentData>>
): UseMutationOptions<unknown, AxiosError<DefaultError>, Options<ApartmentControllerCreateApartmentData>> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    AxiosError<DefaultError>,
    Options<ApartmentControllerCreateApartmentData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await apartmentControllerCreateApartment({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const apartmentControllerJoinApartmentQueryKey = (options?: Options<ApartmentControllerJoinApartmentData>) =>
  createQueryKey('apartmentControllerJoinApartment', options);

export const apartmentControllerJoinApartmentOptions = (options?: Options<ApartmentControllerJoinApartmentData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await apartmentControllerJoinApartment({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: apartmentControllerJoinApartmentQueryKey(options),
  });
};

export const apartmentControllerJoinApartmentMutation = (
  options?: Partial<Options<ApartmentControllerJoinApartmentData>>
): UseMutationOptions<unknown, AxiosError<DefaultError>, Options<ApartmentControllerJoinApartmentData>> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    AxiosError<DefaultError>,
    Options<ApartmentControllerJoinApartmentData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await apartmentControllerJoinApartment({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const taskControllerCreateTaskQueryKey = (options: Options<TaskControllerCreateTaskData>) =>
  createQueryKey('taskControllerCreateTask', options);

export const taskControllerCreateTaskOptions = (options: Options<TaskControllerCreateTaskData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await taskControllerCreateTask({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: taskControllerCreateTaskQueryKey(options),
  });
};

export const taskControllerCreateTaskMutation = (
  options?: Partial<Options<TaskControllerCreateTaskData>>
): UseMutationOptions<unknown, AxiosError<DefaultError>, Options<TaskControllerCreateTaskData>> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    AxiosError<DefaultError>,
    Options<TaskControllerCreateTaskData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await taskControllerCreateTask({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const taskControllerUpdateTaskStatusQueryKey = (options: Options<TaskControllerUpdateTaskStatusData>) =>
  createQueryKey('taskControllerUpdateTaskStatus', options);

export const taskControllerUpdateTaskStatusOptions = (options: Options<TaskControllerUpdateTaskStatusData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await taskControllerUpdateTaskStatus({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: taskControllerUpdateTaskStatusQueryKey(options),
  });
};

export const taskControllerUpdateTaskStatusMutation = (
  options?: Partial<Options<TaskControllerUpdateTaskStatusData>>
): UseMutationOptions<unknown, AxiosError<DefaultError>, Options<TaskControllerUpdateTaskStatusData>> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    AxiosError<DefaultError>,
    Options<TaskControllerUpdateTaskStatusData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await taskControllerUpdateTaskStatus({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const taskControllerEditTaskQueryKey = (options: Options<TaskControllerEditTaskData>) =>
  createQueryKey('taskControllerEditTask', options);

export const taskControllerEditTaskOptions = (options: Options<TaskControllerEditTaskData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await taskControllerEditTask({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: taskControllerEditTaskQueryKey(options),
  });
};

export const taskControllerEditTaskMutation = (
  options?: Partial<Options<TaskControllerEditTaskData>>
): UseMutationOptions<unknown, AxiosError<DefaultError>, Options<TaskControllerEditTaskData>> => {
  const mutationOptions: UseMutationOptions<unknown, AxiosError<DefaultError>, Options<TaskControllerEditTaskData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await taskControllerEditTask({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const taskControllerGetAllTasksQueryKey = (options?: Options<TaskControllerGetAllTasksData>) =>
  createQueryKey('taskControllerGetAllTasks', options);

export const taskControllerGetAllTasksOptions = (options?: Options<TaskControllerGetAllTasksData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await taskControllerGetAllTasks({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: taskControllerGetAllTasksQueryKey(options),
  });
};

export const taskControllerGetCompletedTasksQueryKey = (options: Options<TaskControllerGetCompletedTasksData>) =>
  createQueryKey('taskControllerGetCompletedTasks', options);

export const taskControllerGetCompletedTasksOptions = (options: Options<TaskControllerGetCompletedTasksData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await taskControllerGetCompletedTasks({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: taskControllerGetCompletedTasksQueryKey(options),
  });
};

export const incidentControllerGetAllIncidentsQueryKey = (options: Options<IncidentControllerGetAllIncidentsData>) =>
  createQueryKey('incidentControllerGetAllIncidents', options);

export const incidentControllerGetAllIncidentsOptions = (options: Options<IncidentControllerGetAllIncidentsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await incidentControllerGetAllIncidents({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: incidentControllerGetAllIncidentsQueryKey(options),
  });
};

export const incidentControllerGetIncidentDetailsQueryKey = (
  options: Options<IncidentControllerGetIncidentDetailsData>
) => createQueryKey('incidentControllerGetIncidentDetails', options);

export const incidentControllerGetIncidentDetailsOptions = (
  options: Options<IncidentControllerGetIncidentDetailsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await incidentControllerGetIncidentDetails({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: incidentControllerGetIncidentDetailsQueryKey(options),
  });
};

export const incidentControllerAddEditIncidentQueryKey = (options: Options<IncidentControllerAddEditIncidentData>) =>
  createQueryKey('incidentControllerAddEditIncident', options);

export const incidentControllerAddEditIncidentOptions = (options: Options<IncidentControllerAddEditIncidentData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await incidentControllerAddEditIncident({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: incidentControllerAddEditIncidentQueryKey(options),
  });
};

export const incidentControllerAddEditIncidentMutation = (
  options?: Partial<Options<IncidentControllerAddEditIncidentData>>
): UseMutationOptions<
  IncidentControllerAddEditIncidentResponse,
  AxiosError<DefaultError>,
  Options<IncidentControllerAddEditIncidentData>
> => {
  const mutationOptions: UseMutationOptions<
    IncidentControllerAddEditIncidentResponse,
    AxiosError<DefaultError>,
    Options<IncidentControllerAddEditIncidentData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await incidentControllerAddEditIncident({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const incidentControllerUpdateIncidentQueryKey = (options: Options<IncidentControllerUpdateIncidentData>) =>
  createQueryKey('incidentControllerUpdateIncident', options);

export const incidentControllerUpdateIncidentOptions = (options: Options<IncidentControllerUpdateIncidentData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await incidentControllerUpdateIncident({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: incidentControllerUpdateIncidentQueryKey(options),
  });
};

export const incidentControllerUpdateIncidentMutation = (
  options?: Partial<Options<IncidentControllerUpdateIncidentData>>
): UseMutationOptions<
  IncidentControllerUpdateIncidentResponse,
  AxiosError<DefaultError>,
  Options<IncidentControllerUpdateIncidentData>
> => {
  const mutationOptions: UseMutationOptions<
    IncidentControllerUpdateIncidentResponse,
    AxiosError<DefaultError>,
    Options<IncidentControllerUpdateIncidentData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await incidentControllerUpdateIncident({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const incidentControllerNewCommentQueryKey = (options: Options<IncidentControllerNewCommentData>) =>
  createQueryKey('incidentControllerNewComment', options);

export const incidentControllerNewCommentOptions = (options: Options<IncidentControllerNewCommentData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await incidentControllerNewComment({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: incidentControllerNewCommentQueryKey(options),
  });
};

export const incidentControllerNewCommentMutation = (
  options?: Partial<Options<IncidentControllerNewCommentData>>
): UseMutationOptions<
  IncidentControllerNewCommentResponse,
  AxiosError<DefaultError>,
  Options<IncidentControllerNewCommentData>
> => {
  const mutationOptions: UseMutationOptions<
    IncidentControllerNewCommentResponse,
    AxiosError<DefaultError>,
    Options<IncidentControllerNewCommentData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await incidentControllerNewComment({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const incidentControllerSetOwnerSeenQueryKey = (options: Options<IncidentControllerSetOwnerSeenData>) =>
  createQueryKey('incidentControllerSetOwnerSeen', options);

export const incidentControllerSetOwnerSeenOptions = (options: Options<IncidentControllerSetOwnerSeenData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await incidentControllerSetOwnerSeen({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: incidentControllerSetOwnerSeenQueryKey(options),
  });
};

export const incidentControllerSetOwnerSeenMutation = (
  options?: Partial<Options<IncidentControllerSetOwnerSeenData>>
): UseMutationOptions<unknown, AxiosError<DefaultError>, Options<IncidentControllerSetOwnerSeenData>> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    AxiosError<DefaultError>,
    Options<IncidentControllerSetOwnerSeenData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await incidentControllerSetOwnerSeen({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};
