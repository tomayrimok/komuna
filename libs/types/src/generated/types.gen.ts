// This file is auto-generated by @hey-api/openapi-ts

export type SplitType = 'EQUAL' | 'NUMBER' | 'PERCENTAGE';

export type Expense = {
  /**
   * Unique identifier for the expense
   */
  expenseId: string;
  /**
   * ID of the apartment associated with the expense
   */
  apartmentId: string;
  /**
   * Description of the expense
   */
  description: string;
  extendedDescription?: string;
  /**
   * Amount of the expense
   */
  amount: number;
  /**
   * ID of the user who paid for the expense
   */
  paidById: string;
  /**
   * Splits of the expense among users
   */
  splits: {
    [key: string]: number;
  };
  /**
   * Type of split for the expense
   */
  splitType: SplitType;
  /**
   * User who paid for the expense
   */
  paidByUser: User;
  /**
   * Creation date of the expense
   */
  createdAt: string;
};

export type Payment = {
  /**
   * Unique identifier for the payment
   */
  paymentId: string;
  /**
   * ID of the apartment where the payment is made
   */
  apartmentId: string;
  /**
   * ID of the user making the payment
   */
  fromId: string;
  /**
   * ID of the user receiving the payment
   */
  toId: string;
  /**
   * Amount of the payment
   */
  amount: number;
  /**
   * Date when the payment was created
   */
  createdAt: string;
};

export type IncidentUrgency = 'LOW' | 'MEDIUM' | 'HIGH' | 'EXTREME';

export type IncidentStatus = 'OPEN' | 'IN_PROGRESS' | 'SOLVED';

export type Comment = {
  commentId: string;
  message: string;
  userId: string;
  createdAt: string;
  incidentId: string;
  images: Array<string>;
  user: string;
};

export type Incident = {
  urgencyLevel: IncidentUrgency;
  status: IncidentStatus;
  comments: Array<Comment>;
  reporter: User;
};

export type ShoppingTemplate = {
  [key: string]: unknown;
};

export type ContextType = 'APARTMENT' | 'USER';

export type ShoppingListItemWithIdDto = {
  name: string;
  image?: string;
  isPurchased: boolean;
  category?: string;
  isUrgent: boolean;
  amount: number;
  creatorId?: string;
  createdAt?: string;
  itemId: string;
};

export type ShoppingList = {
  contextType: ContextType;
  contextId: string;
  items: Array<ShoppingListItemWithIdDto>;
  updatedAt: string;
  createdAt: string;
};

export type Apartment = {
  apartmentId: string;
  name: string;
  image: string;
  /**
   * Unique code to join the apartment as a landlord. Can be NULL when the apartment already has a landlord
   */
  landlordCode: string;
  /**
   * Unique code to join the apartment as a roommate. NULL in case the apartment doesn't allow new residents
   */
  roommateCode: string;
  address: string;
  city: string;
  /**
   * Landlord User ID
   */
  landlordUserId?: string;
  /**
   * Landlord of the apartment (Relation)
   */
  landlord?: User;
  /**
   * Apartment contract end date
   */
  contractEndDate?: string;
  /**
   * Apartment rent
   */
  rent?: number;
  /**
   * Bills payment details
   */
  billsDetails?: {
    [key: string]: unknown;
  };
  /**
   * Monthly house committee rent
   */
  houseCommitteeRent?: number;
  /**
   * User ID of the house committee payer. NULL if it's split equally
   */
  houseCommitteePayerUser?: User;
  residents: Array<UserApartment>;
  tasks: Array<UserApartment>;
  expenses: Array<Expense>;
  payments: Array<Payment>;
  incidents: Array<Incident>;
  shoppingTemplates: Array<ShoppingTemplate>;
  shoppingLists: Array<ShoppingList>;
  createdAt: User | null;
};

export type UserApartment = {
  /**
   * The ID of the apartment where the user resides
   */
  apartmentId: string;
  /**
   * The ID of the user who is a resident in the apartment
   */
  userId: string;
  /**
   * The amount of rent the user pays for the apartment
   */
  rent: number;
  /**
   * The role of the user in the apartment
   */
  role: 'LANDLORD' | 'ROOMMATE';
  /**
   * The apartment where the user resides
   */
  apartment: Apartment;
  /**
   * The user who is a resident in the apartment
   */
  user: User;
  /**
   * The user who is responsible for paying rent
   */
  payableByUser: User | null;
  /**
   * The date when the user-apartment relationship was created
   */
  createdAt: string;
};

export type DebtEdge = {
  /**
   * Unique identifier for the debt
   */
  debtId: string;
  /**
   * ID of the apartment this debt belongs to
   */
  apartmentId: string;
  /**
   * ID of the user who owes the debt
   */
  fromId: string;
  /**
   * ID of the user who is owed the debt
   */
  toId: string;
  /**
   * Amount of the debt
   */
  amount: number;
  /**
   * Last update date of the debt
   */
  updatedAt: string;
  /**
   * User who owes the debt
   */
  fromUser: User;
  /**
   * User who is owed the debt
   */
  toUser: User;
};

export type Task = {
  createdBy: User;
};

export type User = {
  userId: string;
  firstName: string;
  phoneNumber: string;
  lastName: string;
  /**
   * URL to user's profile image
   */
  image?: string;
  /**
   * User's apartments
   */
  apartments: Array<UserApartment>;
  /**
   * User's apartments as landlord
   */
  landlordApartments: Array<Apartment>;
  /**
   * User's payable rents
   */
  payableRents: Array<UserApartment>;
  /**
   * User's expenses
   */
  expenses: Array<Expense>;
  /**
   * User's debts
   */
  debts: Array<DebtEdge>;
  /**
   * User's credits
   */
  credits: Array<DebtEdge>;
  /**
   * The comments made by the user
   */
  comments: Array<Comment>;
  /**
   * The incidents reported by the user
   */
  incidents: Array<Incident>;
  /**
   * The tasks created by the user
   */
  createdTasks: Array<Task>;
};

export type DebtEdgeWithDebtor = {
  /**
   * Unique identifier for the debt
   */
  debtId: string;
  /**
   * ID of the apartment this debt belongs to
   */
  apartmentId: string;
  /**
   * ID of the user who owes the debt
   */
  fromId: string;
  /**
   * ID of the user who is owed the debt
   */
  toId: string;
  /**
   * Amount of the debt
   */
  amount: number;
  /**
   * Last update date of the debt
   */
  updatedAt: string;
  /**
   * User who owes the debt
   */
  fromUser: User;
  /**
   * User who is owed the debt
   */
  toUser: User;
  /**
   * ID of the user who is considered the debtor in this edge
   */
  debtor: string;
};

export type LoginDto = {
  /**
   * User's phone number for login
   */
  phoneNumber: string;
};

export type VerifyPhoneNumberDto = {
  /**
   * User's phone number to verify
   */
  phoneNumber: string;
  /**
   * Verification code sent to the phone number
   */
  code: string;
};

export type UserCreatedResponseDto = {
  user: User | null;
  isUser: boolean;
};

export type CreateUserDto = {
  phoneNumber: string;
  firstName: string;
  lastName: string;
  image: string;
};

export type UserResponseDto = {
  user: User | null;
};

export type CreateApartmentDto = {
  [key: string]: unknown;
};

export type ApartmentExpensesResponse = {
  /**
   * ID of the apartment this expense belongs to
   */
  apartmentId: string;
  /**
   * Amount of the expense
   */
  amount: number;
  /**
   * Creation date of the expense
   */
  createdAt: string;
  /**
   * Description of the expense
   */
  description: string;
  /**
   * Extended Description of the expense
   */
  extendedDescription?: string;
  /**
   * ID of the expense
   */
  expenseId: string;
  /**
   * ID of the user who paid for the expense
   */
  paidById: string;
  /**
   * User who paid for the expense
   */
  paidByUser: User;
  /**
   * Object containing user IDs as keys and their share amounts as values
   */
  splits: {
    [key: string]: number;
  };
  /**
   * Whether the expense was paid by the current user
   */
  paidByMe?: boolean;
  /**
   * Amount the current user needs to pay for this expense
   */
  splitAmount?: string;
};

export type AddEditExpenseDto = {
  /**
   * ID of the expense (optional for new expenses)
   */
  expenseId?: string;
  /**
   * Amount of the expense
   */
  amount: number;
  /**
   * Description of the expense
   */
  description: string;
  /**
   * Extended Description of the expense
   */
  extendedDescription?: string;
  /**
   * ID of the user who paid for the expense
   */
  paidById: string;
  /**
   * ID of the apartment this expense belongs to
   */
  apartmentId: string;
  /**
   * Object containing user IDs as keys and their share amounts as values
   */
  splits: {
    [key: string]: number;
  };
  /**
   * Type of split for the expense
   */
  splitType: SplitType;
};

export type CreatePaymentDto = {
  apartmentId: string;
  fromId: string;
  toId: string;
  amount: number;
};

export type TaskType = 'GROUP' | 'PERSONAL';

export type AddEditTaskDto = {
  taskId?: string;
  title: string;
  description?: string;
  /**
   * ISO date string for when the task is due
   */
  dueDate?: string;
  /**
   * Task type
   */
  taskType: TaskType;
  /**
   * ISO time string for when the task is due
   */
  dueTime?: string;
  /**
   * Indicates wheter the task is recurring
   */
  isRecurrent?: boolean;
  apartmentId: string;
  /**
   * An object containing { userId, IsCompleted } for each assigned user.
   */
  assignedTo?: Array<User>;
};

export type Frequency = 'DAILY' | 'WEEKLY' | 'MONTHLY' | 'YEARLY';

export type WeekDay = 'SU' | 'MO' | 'TU' | 'WE' | 'TH' | 'FR' | 'SA';

export type RecurrenceRuleDto = {
  frequency: Frequency;
  interval?: number;
  byWeekDay?: Array<WeekDay>;
  until: string;
  count: number;
};

export type TaskResponseDto = {
  taskId: string;
  title: string;
  description?: string;
  /**
   * An object containing { userId, IsCompleted } for each assigned user.
   */
  assignedTo?: Array<User>;
  /**
   * Task type
   */
  taskType: TaskType;
  /**
   * The user who created the task
   */
  createdBy: User;
  completions?: Array<string>;
  /**
   * ISO date string for when the task is due
   */
  dueDate?: string;
  /**
   * ISO time string for when the task is due
   */
  dueTime?: string;
  /**
   * Indicates whether the task is recurring
   */
  isRecurrent: boolean;
  /**
   * RecurrenceRule is defined as a repetitive time-frame class object
   */
  recurrenceRule?: RecurrenceRuleDto;
};

export type UpdateTaskDto = {
  taskId: string;
  title?: string;
  description?: string;
  /**
   * An object containing { userId, IsCompleted } for each assigned user.
   */
  assignedTo?: Array<User>;
  completions: Array<string>;
  /**
   * ISO date string for when the task is due
   */
  dueDate?: string;
  /**
   * Task type
   */
  taskType: TaskType;
  /**
   * ISO time string for when the task is due
   */
  dueTime?: string;
  /**
   * Indicates wheter the task is recurring
   */
  isRecurrent?: boolean;
  /**
   * RecurrenceRule is defined as a repetetive time-frame class object
   */
  recurrenceRule?: RecurrenceRuleDto;
};

export type CommentResponseDto = {
  commentId: string;
  incidentId: string;
  userId: string;
  message: string;
  createdAt: string;
  user: User;
};

export type IncidentResponseDto = {
  incidentId: string;
  apartmentId: string;
  title: string;
  description: string;
  images: Array<string>;
  urgencyLevel: IncidentUrgency;
  reporterId: string;
  reporter: User;
  status: IncidentStatus;
  seenByManager: boolean;
  managerResponse: string;
  updatedAt: string;
  createdAt: string;
  comments: Array<CommentResponseDto>;
};

export type AddEditIncidentDto = {
  incidentId?: string;
  title: string;
  description: string;
  /**
   * How urgent the incident is. used by Enum IncidentUrgency
   */
  urgencyLevel: IncidentUrgency;
  apartmentId: string;
};

export type UpdateIncidentDto = {
  incidentId: string;
  status?: IncidentStatus;
  title?: string;
  description?: string;
  urgencyLevel?: IncidentUrgency;
  /**
   * List of image URLs related to the incident
   */
  images?: Array<string>;
};

export type AddCommentDto = {
  incidentId: string;
  message: string;
  /**
   * List of image URLs related to the comment
   */
  images?: Array<string>;
};

export type SyncListDto = {
  contextType: 'APARTMENT' | 'USER';
  apartmentId: string;
  items: Array<ShoppingListItemWithIdDto>;
};

export type GroceryItem = {
  id: string;
  formattedPrice: string;
  image: string;
  description: string;
  category: string;
  priceForUnit: string;
};

export type SearchGroceryResponse = {
  items: Array<GroceryItem>;
};

export type AppControllerGetDataData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api';
};

export type AppControllerGetDataResponses = {
  200: unknown;
};

export type DebtEdgeControllerGetUserBalanceDetailsData = {
  body?: never;
  path?: never;
  query: {
    apartmentId: string;
  };
  url: '/api/debt-edge/user-balance-details';
};

export type DebtEdgeControllerGetUserBalanceDetailsResponses = {
  200: Array<DebtEdgeWithDebtor>;
};

export type DebtEdgeControllerGetUserBalanceDetailsResponse =
  DebtEdgeControllerGetUserBalanceDetailsResponses[keyof DebtEdgeControllerGetUserBalanceDetailsResponses];

export type DebtEdgeControllerGetUserBalanceData = {
  body?: never;
  path?: never;
  query: {
    apartmentId: string;
  };
  url: '/api/debt-edge/user-balance';
};

export type DebtEdgeControllerGetUserBalanceResponses = {
  200: number;
};

export type DebtEdgeControllerGetUserBalanceResponse =
  DebtEdgeControllerGetUserBalanceResponses[keyof DebtEdgeControllerGetUserBalanceResponses];

export type DebtEdgeControllerGetDebtDetailsData = {
  body?: never;
  path?: never;
  query: {
    debtId: string;
  };
  url: '/api/debt-edge/debt-details';
};

export type DebtEdgeControllerGetDebtDetailsResponses = {
  200: DebtEdge;
};

export type DebtEdgeControllerGetDebtDetailsResponse =
  DebtEdgeControllerGetDebtDetailsResponses[keyof DebtEdgeControllerGetDebtDetailsResponses];

export type UserControllerLoginOrCreateData = {
  body: LoginDto;
  path?: never;
  query?: never;
  url: '/api/user/login';
};

export type UserControllerLoginOrCreateResponses = {
  201: unknown;
};

export type UserControllerVerifyData = {
  body: VerifyPhoneNumberDto;
  path?: never;
  query?: never;
  url: '/api/user/verify';
};

export type UserControllerVerifyResponses = {
  200: UserCreatedResponseDto;
};

export type UserControllerVerifyResponse = UserControllerVerifyResponses[keyof UserControllerVerifyResponses];

export type UserControllerGetCurrentUserProfileData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/user';
};

export type UserControllerGetCurrentUserProfileResponses = {
  200: UserResponseDto;
};

export type UserControllerGetCurrentUserProfileResponse =
  UserControllerGetCurrentUserProfileResponses[keyof UserControllerGetCurrentUserProfileResponses];

export type UserControllerCreateUserData = {
  body: CreateUserDto;
  path?: never;
  query?: never;
  url: '/api/user';
};

export type UserControllerCreateUserResponses = {
  200: UserResponseDto;
};

export type UserControllerCreateUserResponse =
  UserControllerCreateUserResponses[keyof UserControllerCreateUserResponses];

export type UserControllerLogoutData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/user/logout';
};

export type UserControllerLogoutResponses = {
  201: unknown;
};

export type NotificationControllerRegisterTokenData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/notification/register-token';
};

export type NotificationControllerRegisterTokenResponses = {
  201: unknown;
};

export type ApartmentControllerGetApartmentWithResidentsData = {
  body?: never;
  path?: never;
  query: {
    apartmentId: string;
  };
  url: '/api/apartment';
};

export type ApartmentControllerGetApartmentWithResidentsResponses = {
  200: Apartment;
};

export type ApartmentControllerGetApartmentWithResidentsResponse =
  ApartmentControllerGetApartmentWithResidentsResponses[keyof ApartmentControllerGetApartmentWithResidentsResponses];

export type ApartmentControllerCreateApartmentData = {
  body: CreateApartmentDto;
  path?: never;
  query?: never;
  url: '/api/apartment';
};

export type ApartmentControllerCreateApartmentResponses = {
  201: unknown;
};

export type ApartmentControllerJoinApartmentData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/apartment/join/{code}';
};

export type ApartmentControllerJoinApartmentResponses = {
  200: UserApartment;
};

export type ApartmentControllerJoinApartmentResponse =
  ApartmentControllerJoinApartmentResponses[keyof ApartmentControllerJoinApartmentResponses];

export type ApartmentControllerGetRoommatesData = {
  body?: never;
  path: {
    apartmentId: string;
  };
  query?: never;
  url: '/api/apartment/{apartmentId}/roommates';
};

export type ApartmentControllerGetRoommatesResponses = {
  200: unknown;
};

export type ExpenseControllerGetApartmentExpensesData = {
  body?: never;
  path?: never;
  query: {
    apartmentId: string;
    userId: string;
  };
  url: '/api/expense/apartment-expenses';
};

export type ExpenseControllerGetApartmentExpensesResponses = {
  200: Array<ApartmentExpensesResponse>;
};

export type ExpenseControllerGetApartmentExpensesResponse =
  ExpenseControllerGetApartmentExpensesResponses[keyof ExpenseControllerGetApartmentExpensesResponses];

export type ExpenseControllerAddEditExpenseData = {
  body: AddEditExpenseDto;
  path?: never;
  query?: never;
  url: '/api/expense/add-edit-expense';
};

export type ExpenseControllerAddEditExpenseResponses = {
  201: unknown;
};

export type ExpenseControllerGetExpenseDetailsData = {
  body?: never;
  path?: never;
  query: {
    expenseId: string;
  };
  url: '/api/expense/expense-details';
};

export type ExpenseControllerGetExpenseDetailsResponses = {
  200: Expense;
};

export type ExpenseControllerGetExpenseDetailsResponse =
  ExpenseControllerGetExpenseDetailsResponses[keyof ExpenseControllerGetExpenseDetailsResponses];

export type PaymentControllerCreatePaymentData = {
  body: CreatePaymentDto;
  path?: never;
  query?: never;
  url: '/api/payment/create-payment';
};

export type PaymentControllerCreatePaymentResponses = {
  200: Payment;
};

export type PaymentControllerCreatePaymentResponse =
  PaymentControllerCreatePaymentResponses[keyof PaymentControllerCreatePaymentResponses];

export type TaskControllerCreateTaskData = {
  body: AddEditTaskDto;
  path?: never;
  query?: never;
  url: '/api/task/add-edit';
};

export type TaskControllerCreateTaskResponses = {
  200: TaskResponseDto;
};

export type TaskControllerCreateTaskResponse =
  TaskControllerCreateTaskResponses[keyof TaskControllerCreateTaskResponses];

export type TaskControllerUpdateTaskCompletionData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/task/update-completion';
};

export type TaskControllerUpdateTaskCompletionResponses = {
  200: TaskResponseDto;
};

export type TaskControllerUpdateTaskCompletionResponse =
  TaskControllerUpdateTaskCompletionResponses[keyof TaskControllerUpdateTaskCompletionResponses];

export type TaskControllerEditTaskData = {
  body: UpdateTaskDto;
  path?: never;
  query?: never;
  url: '/api/task/edit';
};

export type TaskControllerEditTaskResponses = {
  200: TaskResponseDto;
};

export type TaskControllerEditTaskResponse = TaskControllerEditTaskResponses[keyof TaskControllerEditTaskResponses];

export type TaskControllerGetAllTasksData = {
  body?: never;
  path?: never;
  query: {
    apartmentId: string;
  };
  url: '/api/task';
};

export type TaskControllerGetAllTasksResponses = {
  200: Array<TaskResponseDto>;
};

export type TaskControllerGetAllTasksResponse =
  TaskControllerGetAllTasksResponses[keyof TaskControllerGetAllTasksResponses];

export type TaskControllerGetTaskByIdData = {
  body?: never;
  path?: never;
  query: {
    taskId: string;
    apartmentId: string;
  };
  url: '/api/task/get-by-id';
};

export type TaskControllerGetTaskByIdResponses = {
  200: TaskResponseDto;
};

export type TaskControllerGetTaskByIdResponse =
  TaskControllerGetTaskByIdResponses[keyof TaskControllerGetTaskByIdResponses];

export type TaskControllerGetCompletedTasksData = {
  body?: never;
  path?: never;
  query: {
    loadMultiplier: number;
  };
  url: '/api/task/get-completed';
};

export type TaskControllerGetCompletedTasksResponses = {
  200: unknown;
};

export type IncidentControllerGetAllIncidentsData = {
  body?: never;
  path?: never;
  query: {
    apartmentId: string;
  };
  url: '/api/incident';
};

export type IncidentControllerGetAllIncidentsResponses = {
  200: Array<IncidentResponseDto>;
};

export type IncidentControllerGetAllIncidentsResponse =
  IncidentControllerGetAllIncidentsResponses[keyof IncidentControllerGetAllIncidentsResponses];

export type IncidentControllerGetIncidentDetailsData = {
  body?: never;
  path?: never;
  query: {
    incidentId: string;
  };
  url: '/api/incident/details';
};

export type IncidentControllerGetIncidentDetailsResponses = {
  200: IncidentResponseDto;
};

export type IncidentControllerGetIncidentDetailsResponse =
  IncidentControllerGetIncidentDetailsResponses[keyof IncidentControllerGetIncidentDetailsResponses];

export type IncidentControllerAddEditIncidentData = {
  body: AddEditIncidentDto;
  path?: never;
  query?: never;
  url: '/api/incident/add-edit';
};

export type IncidentControllerAddEditIncidentResponses = {
  200: Incident;
};

export type IncidentControllerAddEditIncidentResponse =
  IncidentControllerAddEditIncidentResponses[keyof IncidentControllerAddEditIncidentResponses];

export type IncidentControllerUpdateIncidentData = {
  body: UpdateIncidentDto;
  path?: never;
  query?: never;
  url: '/api/incident/update';
};

export type IncidentControllerUpdateIncidentResponses = {
  200: Incident;
};

export type IncidentControllerUpdateIncidentResponse =
  IncidentControllerUpdateIncidentResponses[keyof IncidentControllerUpdateIncidentResponses];

export type IncidentControllerNewCommentData = {
  body: AddCommentDto;
  path?: never;
  query?: never;
  url: '/api/incident/comment';
};

export type IncidentControllerNewCommentResponses = {
  200: Comment;
};

export type IncidentControllerNewCommentResponse =
  IncidentControllerNewCommentResponses[keyof IncidentControllerNewCommentResponses];

export type IncidentControllerSetOwnerSeenData = {
  body?: never;
  path?: never;
  query: {
    incidentId: string;
    apartmentId: string;
  };
  url: '/api/incident/owner-seen';
};

export type IncidentControllerSetOwnerSeenResponses = {
  201: unknown;
};

export type ShoppingListControllerGetShoppingListData = {
  body?: never;
  path?: never;
  query: {
    contextType: 'APARTMENT' | 'USER';
    apartmentId: string;
  };
  url: '/api/shopping-list';
};

export type ShoppingListControllerGetShoppingListResponses = {
  200: ShoppingList;
};

export type ShoppingListControllerGetShoppingListResponse =
  ShoppingListControllerGetShoppingListResponses[keyof ShoppingListControllerGetShoppingListResponses];

export type ShoppingListControllerSyncItemsData = {
  body: SyncListDto;
  path?: never;
  query?: never;
  url: '/api/shopping-list/sync-items';
};

export type ShoppingListControllerSyncItemsResponses = {
  200: ShoppingList;
};

export type ShoppingListControllerSyncItemsResponse =
  ShoppingListControllerSyncItemsResponses[keyof ShoppingListControllerSyncItemsResponses];

export type ShoppingListControllerSearchItemData = {
  body?: never;
  path?: never;
  query: {
    query: string;
  };
  url: '/api/shopping-list/search-item';
};

export type ShoppingListControllerSearchItemResponses = {
  200: SearchGroceryResponse;
};

export type ShoppingListControllerSearchItemResponse =
  ShoppingListControllerSearchItemResponses[keyof ShoppingListControllerSearchItemResponses];

export type ClientOptions = {
  baseURL: string;
};
