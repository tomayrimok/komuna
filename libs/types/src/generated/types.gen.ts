// This file is auto-generated by @hey-api/openapi-ts

export type SplitType = 'EQUAL' | 'NUMBER' | 'PERCENTAGE';

export type Expense = {
  /**
   * Unique identifier for the expense
   */
  expenseId: string;
  /**
   * ID of the apartment associated with the expense
   */
  apartmentId: string;
  /**
   * Description of the expense
   */
  description: string;
  /**
   * Amount of the expense
   */
  amount: number;
  /**
   * ID of the user who paid for the expense
   */
  paidById: string;
  /**
   * Splits of the expense among users
   */
  splits: {
    [key: string]: number;
  };
  /**
   * Type of split for the expense
   */
  splitType: SplitType;
  /**
   * User who paid for the expense
   */
  paidByUser: User;
  /**
   * Creation date of the expense
   */
  createdAt: string;
};

export type Payment = {
  /**
   * Unique identifier for the payment
   */
  paymentId: string;
  /**
   * ID of the apartment where the payment is made
   */
  apartmentId: string;
  /**
   * ID of the user making the payment
   */
  fromId: string;
  /**
   * ID of the user receiving the payment
   */
  toId: string;
  /**
   * Amount of the payment
   */
  amount: number;
  /**
   * Date when the payment was created
   */
  createdAt: string;
};

export type IncidentUrgency = 'LOW' | 'MEDIUM' | 'HIGH' | 'EXTREME';

export type IncidentStatus = 'OPEN' | 'IN_PROGRESS' | 'SOLVED';

export type Comment = {
  commentId: string;
  message: string;
  userId: string;
  createdAt: string;
  incidentId: string;
  images: Array<string>;
};

export type Incident = {
  incidentId: string;
  apartmentId: string;
  title: string;
  description: string;
  images: Array<string>;
  urgencyLevel: IncidentUrgency;
  reporterId: string;
  status: IncidentStatus;
  seenByManager: boolean;
  managerResponse: string;
  updatedAt: string;
  createdAt: string;
  comments: Array<Comment>;
};

export type ShoppingTemplate = {
  [key: string]: unknown;
};

export type ShoppingList = {
  [key: string]: unknown;
};

export type Apartment = {
  apartmentId: string;
  name: string;
  image: string;
  /**
   * Unique code to join the apartment as a landlord. Can be NULL when the apartment already has a landlord
   */
  landlordCode: string;
  /**
   * Unique code to join the apartment as a roommate. NULL in case the apartment doesn't allow new residents
   */
  roommateCode: string;
  address: string;
  city: string;
  /**
   * Landlord User ID
   */
  landlordUserId?: string;
  /**
   * Landlord of the apartment (Relation)
   */
  landlord?: {
    [key: string]: unknown;
  };
  /**
   * Apartment contract end date
   */
  contractEndDate?: string;
  /**
   * Apartment rent
   */
  rent?: number;
  /**
   * Bills payment details
   */
  billsDetails?: {
    [key: string]: unknown;
  };
  /**
   * Monthly house committee rent
   */
  houseCommitteeRent?: number;
  /**
   * User ID of the house committee payer. NULL if it's split equally
   */
  houseCommitteePayerUser?: {
    [key: string]: unknown;
  };
  residents: Array<UserApartment>;
  tasks: Array<UserApartment>;
  expenses: Array<Expense>;
  payments: Array<Payment>;
  incidents: Array<Incident>;
  shoppingTemplates: Array<ShoppingTemplate>;
  shoppingLists: Array<ShoppingList>;
  createdAt: User | null;
};

export type UserApartment = {
  /**
   * The ID of the apartment where the user resides
   */
  apartmentId: string;
  /**
   * The ID of the user who is a resident in the apartment
   */
  userId: string;
  /**
   * The amount of rent the user pays for the apartment
   */
  rent: number;
  /**
   * The role of the user in the apartment
   */
  role: 'LANDLORD' | 'ROOMMATE';
  /**
   * The apartment where the user resides
   */
  apartment: Apartment;
  /**
   * The user who is a resident in the apartment
   */
  user: User;
  /**
   * The user who is responsible for paying rent
   */
  payableByUser: User | null;
  /**
   * The date when the user-apartment relationship was created
   */
  createdAt: string;
};

export type DebtEdge = {
  /**
   * Unique identifier for the debt
   */
  debtId: string;
  /**
   * ID of the apartment this debt belongs to
   */
  apartmentId: string;
  /**
   * ID of the user who owes the debt
   */
  fromId: string;
  /**
   * ID of the user who is owed the debt
   */
  toId: string;
  /**
   * Amount of the debt
   */
  amount: number;
  /**
   * Last update date of the debt
   */
  updatedAt: string;
  /**
   * User who owes the debt
   */
  fromUser: User;
  /**
   * User who is owed the debt
   */
  toUser: User;
};

export type User = {
  userId: string;
  firstName: string;
  phoneNumber: string;
  lastName: string;
  /**
   * URL to user's profile image
   */
  image?: string;
  /**
   * User's apartments
   */
  apartments: Array<UserApartment>;
  /**
   * User's apartments as landlord
   */
  landlordApartments: Array<Apartment>;
  /**
   * User's payable rents
   */
  payableRents: Array<UserApartment>;
  /**
   * User's expenses
   */
  expenses: Array<Expense>;
  /**
   * User's debts
   */
  debts: Array<DebtEdge>;
  /**
   * User's credits
   */
  credits: Array<DebtEdge>;
};

export type DebtEdgeWithDebtor = {
  /**
   * Unique identifier for the debt
   */
  debtId: string;
  /**
   * ID of the apartment this debt belongs to
   */
  apartmentId: string;
  /**
   * ID of the user who owes the debt
   */
  fromId: string;
  /**
   * ID of the user who is owed the debt
   */
  toId: string;
  /**
   * Amount of the debt
   */
  amount: number;
  /**
   * Last update date of the debt
   */
  updatedAt: string;
  /**
   * User who owes the debt
   */
  fromUser: User;
  /**
   * User who is owed the debt
   */
  toUser: User;
  /**
   * ID of the user who is considered the debtor in this edge
   */
  debtor: string;
};

export type LoginDto = {
  /**
   * User's phone number for login
   */
  phoneNumber: string;
};

export type VerifyPhoneNumberDto = {
  /**
   * User's phone number to verify
   */
  phoneNumber: string;
  /**
   * Verification code sent to the phone number
   */
  code: string;
};

export type UserCreatedResponseDto = {
  user: User | null;
  isUser: boolean;
};

export type CreateUserDto = {
  phoneNumber: string;
  firstName: string;
  lastName: string;
  image: string;
};

export type UserResponseDto = {
  user: User | null;
};

export type ApartmentExpensesResponse = {
  /**
   * ID of the apartment this expense belongs to
   */
  apartmentId: string;
  /**
   * Amount of the expense
   */
  amount: number;
  /**
   * Creation date of the expense
   */
  createdAt: string;
  /**
   * Description of the expense
   */
  description: string;
  /**
   * ID of the expense
   */
  expenseId: string;
  /**
   * ID of the user who paid for the expense
   */
  paidById: string;
  /**
   * User who paid for the expense
   */
  paidByUser: User;
  /**
   * Object containing user IDs as keys and their share amounts as values
   */
  splits: {
    [key: string]: number;
  };
  /**
   * Whether the expense was paid by the current user
   */
  paidByMe?: boolean;
  /**
   * Amount the current user needs to pay for this expense
   */
  splitAmount?: string;
};

export type AddEditExpenseDto = {
  /**
   * ID of the expense (optional for new expenses)
   */
  expenseId?: string;
  /**
   * Amount of the expense
   */
  amount: number;
  /**
   * Description of the expense
   */
  description: string;
  /**
   * ID of the user who paid for the expense
   */
  paidById: string;
  /**
   * ID of the apartment this expense belongs to
   */
  apartmentId: string;
  /**
   * Object containing user IDs as keys and their share amounts as values
   */
  splits: {
    [key: string]: number;
  };
  /**
   * Type of split for the expense
   */
  splitType: SplitType;
};

export type CreatePaymentDto = {
  apartmentId: string;
  fromId: string;
  toId: string;
  amount: number;
};

export type CreateApartmentDto = {
  [key: string]: unknown;
};

export type TaskDto = {
  [key: string]: unknown;
};

export type UpdateTaskReqDto = {
  [key: string]: unknown;
};

export type EditTaskReqDto = {
  [key: string]: unknown;
};

export type CreateIncidentDto = {
  apartmentId: string;
  title: string;
  description: string;
  /**
   * How urgent the incident is. used by Enum IncidentUrgency
   */
  urgencyLevel: IncidentUrgency;
  /**
   * List of image URLs related to the incident
   */
  images?: Array<string>;
};

export type UpdateIncidentStatusDto = {
  incidentId: string;
  status: {
    [key: string]: unknown;
  };
  updatedAt: string;
};

export type AddCommentDto = {
  incidentId: string;
  userId: string;
  message: string;
  images: Array<string>;
};

export type AppControllerGetDataData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api';
};

export type AppControllerGetDataResponses = {
  200: unknown;
};

export type DebtEdgeControllerGetUserBalanceDetailsData = {
  body?: never;
  path?: never;
  query: {
    userId: string;
    apartmentId: string;
  };
  url: '/api/debt-edge/user-balance-details';
};

export type DebtEdgeControllerGetUserBalanceDetailsResponses = {
  200: Array<DebtEdgeWithDebtor>;
};

export type DebtEdgeControllerGetUserBalanceDetailsResponse =
  DebtEdgeControllerGetUserBalanceDetailsResponses[keyof DebtEdgeControllerGetUserBalanceDetailsResponses];

export type DebtEdgeControllerGetUserBalanceData = {
  body?: never;
  path?: never;
  query: {
    userId: string;
    apartmentId: string;
  };
  url: '/api/debt-edge/user-balance';
};

export type DebtEdgeControllerGetUserBalanceResponses = {
  200: number;
};

export type DebtEdgeControllerGetUserBalanceResponse =
  DebtEdgeControllerGetUserBalanceResponses[keyof DebtEdgeControllerGetUserBalanceResponses];

export type DebtEdgeControllerGetDebtDetailsData = {
  body?: never;
  path?: never;
  query: {
    debtId: string;
  };
  url: '/api/debt-edge/debt-details';
};

export type DebtEdgeControllerGetDebtDetailsResponses = {
  200: DebtEdge;
};

export type DebtEdgeControllerGetDebtDetailsResponse =
  DebtEdgeControllerGetDebtDetailsResponses[keyof DebtEdgeControllerGetDebtDetailsResponses];

export type UserControllerLoginOrCreateData = {
  body: LoginDto;
  path?: never;
  query?: never;
  url: '/api/user/login';
};

export type UserControllerLoginOrCreateResponses = {
  201: unknown;
};

export type UserControllerVerifyData = {
  body: VerifyPhoneNumberDto;
  path?: never;
  query?: never;
  url: '/api/user/verify';
};

export type UserControllerVerifyResponses = {
  200: UserCreatedResponseDto;
};

export type UserControllerVerifyResponse = UserControllerVerifyResponses[keyof UserControllerVerifyResponses];

export type UserControllerGetCurrentUserProfileData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/user';
};

export type UserControllerGetCurrentUserProfileResponses = {
  200: UserResponseDto;
};

export type UserControllerGetCurrentUserProfileResponse =
  UserControllerGetCurrentUserProfileResponses[keyof UserControllerGetCurrentUserProfileResponses];

export type UserControllerCreateUserData = {
  body: CreateUserDto;
  path?: never;
  query?: never;
  url: '/api/user';
};

export type UserControllerCreateUserResponses = {
  200: UserResponseDto;
};

export type UserControllerCreateUserResponse =
  UserControllerCreateUserResponses[keyof UserControllerCreateUserResponses];

export type UserControllerLogoutData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/user/logout';
};

export type UserControllerLogoutResponses = {
  201: unknown;
};

export type ExpenseControllerGetApartmentExpensesData = {
  body?: never;
  path?: never;
  query: {
    apartmentId: string;
    userId: string;
  };
  url: '/api/expense/apartment-expenses';
};

export type ExpenseControllerGetApartmentExpensesResponses = {
  200: Array<ApartmentExpensesResponse>;
};

export type ExpenseControllerGetApartmentExpensesResponse =
  ExpenseControllerGetApartmentExpensesResponses[keyof ExpenseControllerGetApartmentExpensesResponses];

export type ExpenseControllerAddEditExpenseData = {
  body: AddEditExpenseDto;
  path?: never;
  query?: never;
  url: '/api/expense/add-edit-expense';
};

export type ExpenseControllerAddEditExpenseResponses = {
  201: unknown;
};

export type ExpenseControllerGetExpenseDetailsData = {
  body?: never;
  path?: never;
  query: {
    expenseId: string;
  };
  url: '/api/expense/expense-details';
};

export type ExpenseControllerGetExpenseDetailsResponses = {
  200: Expense;
};

export type ExpenseControllerGetExpenseDetailsResponse =
  ExpenseControllerGetExpenseDetailsResponses[keyof ExpenseControllerGetExpenseDetailsResponses];

export type PaymentControllerCreatePaymentData = {
  body: CreatePaymentDto;
  path?: never;
  query?: never;
  url: '/api/payment/create-payment';
};

export type PaymentControllerCreatePaymentResponses = {
  200: Payment;
};

export type PaymentControllerCreatePaymentResponse =
  PaymentControllerCreatePaymentResponses[keyof PaymentControllerCreatePaymentResponses];

export type ApartmentControllerGetApartmentWithResidentsData = {
  body?: never;
  path?: never;
  query: {
    apartmentId: string;
  };
  url: '/api/apartment';
};

export type ApartmentControllerGetApartmentWithResidentsResponses = {
  200: Apartment;
};

export type ApartmentControllerGetApartmentWithResidentsResponse =
  ApartmentControllerGetApartmentWithResidentsResponses[keyof ApartmentControllerGetApartmentWithResidentsResponses];

export type ApartmentControllerCreateApartmentData = {
  body: CreateApartmentDto;
  path?: never;
  query?: never;
  url: '/api/apartment';
};

export type ApartmentControllerCreateApartmentResponses = {
  201: unknown;
};

export type ApartmentControllerJoinApartmentData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/apartment/join/{code}';
};

export type ApartmentControllerJoinApartmentResponses = {
  201: unknown;
};

export type TaskControllerCreateTaskData = {
  body: TaskDto;
  path?: never;
  query?: never;
  url: '/api/task/create';
};

export type TaskControllerCreateTaskResponses = {
  201: unknown;
};

export type TaskControllerUpdateTaskStatusData = {
  body: UpdateTaskReqDto;
  path?: never;
  query?: never;
  url: '/api/task/update';
};

export type TaskControllerUpdateTaskStatusResponses = {
  201: unknown;
};

export type TaskControllerEditTaskData = {
  body: EditTaskReqDto;
  path?: never;
  query?: never;
  url: '/api/task/edit';
};

export type TaskControllerEditTaskResponses = {
  201: unknown;
};

export type TaskControllerGetAllTasksData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/task/get';
};

export type TaskControllerGetAllTasksResponses = {
  200: unknown;
};

export type TaskControllerGetCompletedTasksData = {
  body?: never;
  path?: never;
  query: {
    loadMultiplier: number;
  };
  url: '/api/task/get-completed';
};

export type TaskControllerGetCompletedTasksResponses = {
  200: unknown;
};

export type IncidentControllerGetAllIncidentsData = {
  body?: never;
  path?: never;
  query: {
    apartmentId: string;
  };
  url: '/api/incident';
};

export type IncidentControllerGetAllIncidentsResponses = {
  200: Array<Incident>;
};

export type IncidentControllerGetAllIncidentsResponse =
  IncidentControllerGetAllIncidentsResponses[keyof IncidentControllerGetAllIncidentsResponses];

export type IncidentControllerGetIncidentDetailsData = {
  body?: never;
  path?: never;
  query: {
    incidentId: string;
  };
  url: '/api/incident/details';
};

export type IncidentControllerGetIncidentDetailsResponses = {
  200: Incident;
};

export type IncidentControllerGetIncidentDetailsResponse =
  IncidentControllerGetIncidentDetailsResponses[keyof IncidentControllerGetIncidentDetailsResponses];

export type IncidentControllerCreateIncidentData = {
  body: CreateIncidentDto;
  path?: never;
  query?: never;
  url: '/api/incident/create';
};

export type IncidentControllerCreateIncidentResponses = {
  200: Incident;
};

export type IncidentControllerCreateIncidentResponse =
  IncidentControllerCreateIncidentResponses[keyof IncidentControllerCreateIncidentResponses];

export type IncidentControllerUpdateIncidentData = {
  body: UpdateIncidentStatusDto;
  path?: never;
  query?: never;
  url: '/api/incident/update';
};

export type IncidentControllerUpdateIncidentResponses = {
  201: unknown;
};

export type IncidentControllerNewCommentData = {
  body: AddCommentDto;
  path?: never;
  query?: never;
  url: '/api/incident/comment';
};

export type IncidentControllerNewCommentResponses = {
  201: unknown;
};

export type IncidentControllerSetOwnerSeenData = {
  body?: never;
  path?: never;
  query: {
    incidentId: string;
    apartmentId: string;
  };
  url: '/api/incident/owner-seen';
};

export type IncidentControllerSetOwnerSeenResponses = {
  201: unknown;
};

export type ClientOptions = {
  baseURL: string;
};
